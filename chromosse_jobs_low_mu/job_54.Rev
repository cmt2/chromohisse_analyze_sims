dataset  = 54
treefile = "data_low_mu/sim" + dataset + ".tre"
datafile = "data_low_mu/sim" + dataset + "_sse.tsv"
outfile  = "output_low_mu/chromosse_sim" + dataset + ".log"

loadPlugin("TensorPhylo", "/home/mrmay/.plugins")
print("Marker 1… TensorPhylo")

k    = 16
tree = readTrees(treefile)[1]
age  = tree.rootAge()
taxa = tree.taxa()
print("Marker 2… tree")

data = readCharacterDataDelimited(datafile, stateLabels=k + 1, type="NaturalNumbers", delimiter="\t", header=FALSE)
print("Marker 3… character data")

mvi = 0

# rate matrix for chromosomes
gamma_a ~ dnExponential(2)
moves[++mvi] = mvScale(gamma_a, lambda = 0.2)

delta_a ~ dnExponential(2)
moves[++mvi] = mvScale(delta_a, lambda = 0.2)

moves[++mvi] = mvUpDownScale(weight=2, lambda = 0.1)
moves[mvi].addVariable(gamma_a, up = TRUE)
moves[mvi].addVariable(delta_a, up = FALSE)

rho <- abs(0.0)

# rate matrix for hidden characters 
alpha <- 0

# set up anagenetic matrix manually
# empty matrix
for(i in 1:(k + 1)) {
	for(j in 1:(k + 1)) {
		r[i][j] <- 0.0
	}
}

# populate rates
for(i in 1:(k+1)) {
	if (i == 1) {
	} else if (i == k + 1) {
		r[i][i-1] := delta_a
	} else if (i == 2) {
		r[i][i+1] := gamma_a
	} else {
		r[i][i+1] := gamma_a
		r[i][i-1] := delta_a
	}
}

Q_combined := fnFreeK(r, rescale=FALSE)


# cladogenetic stuff

#empirical prior def
taxa <- tree.taxa()
speciation_mean <- ln( taxa.size() ) / tree.rootAge()
speciation_pr <- 1 / speciation_mean

# Each cladogenetic event type is assigned its own speciation rate

total_speciation ~ dnExponential(speciation_pr)
total_speciation ~ dnExponential(speciation_pr)
moves[++mvi] = mvScale(total_speciation, lambda=0.1)

relative_clado ~ dnDirichlet([1,1,1])
moves[++mvi] = mvBetaSimplex(relative_clado, alpha=100, weight = 10)

clado_rates := total_speciation * abs(relative_clado)

# 2 no change rates, 
clado_no_change_a := clado_rates[1]
clado_no_change_b := clado_rates[1]
clado_fission_a   := clado_rates[2]
clado_fission_b   := clado_rates[2]
clado_fusion_a    := clado_rates[3]
clado_fusion_b    := clado_rates[3]
chi               <- 0

# forbid polyploidy and demipolyploidy
clado_polyploid <- 0.0
clado_demipoly <- 0.0

# write a very large loop thing that will build a matrix to account for transitions (add element for clado change between hidden using the chi rates)

ne = 0
clado_events[++ne] <- [1,1,1]
clado_probs[ne]    := Probability(1.0)

# also specify the speciation rates
lambda[1] := 0

# right now no demipolyploidy
for(i in 1:k) { # this index is the number of chromosomes
	
	idx = i + 1 # because tensorphylo will drop the indexing by one
	idx_hidden = idx+k+1	
	if (i == 1) {

		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_polyploid + chi)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * (clado_fission_a + clado_polyploid) / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * (clado_fission_a + clado_polyploid) / lambda[idx])
		
	} else if ( i + i <= k ) { # polyploidization allowed
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_fusion_a + clado_polyploid + chi)
		
		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])
		
		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		
		# polyploidization
		clado_events[++ne] <- [idx, i + i + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])
		clado_events[++ne] <- [idx, idx, i + i + 1]
		clado_probs[ne]    := Probability(0.5 * clado_polyploid / lambda[idx])

	} else if ( i < k ) { # fission but no polyploidy
		
		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fission_a + clado_fusion_a + chi)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])

		# increase by one
		clado_events[++ne] <- [idx, idx + 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx + 1]
		clado_probs[ne]    := Probability(0.5 * clado_fission_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])		

	} else { # maximum state -- no fission or polyploidy

		# compute the total rate
		lambda[idx] := abs(clado_no_change_a + clado_fusion_a + chi)

		# no change
		clado_events[++ne] <- [idx, idx, idx]
		clado_probs[ne]    := Probability(clado_no_change_a / lambda[idx])
		
		# decrease by one
		clado_events[++ne] <- [idx, idx - 1, idx]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])
		clado_events[++ne] <- [idx, idx, idx - 1]
		clado_probs[ne]    := Probability(0.5 * clado_fusion_a / lambda[idx])	

	}

}

# map the speciation rates to chromosome cladogenetic events
omega := fnCladogeneticProbabilityMatrix(clado_events, clado_probs, k + 1)

# diversification parameters
# total_speciation := clado_no_change + clado_fission + clado_fusion + clado_polyploid + clado_demipoly
turnover ~ dnExponential(speciation_pr)
turnover.setValue(0.9)
moves[++mvi] = mvScale(turnover, lambda=0.1)
for (i in 1:(k + 1)) {
    mu[i] := turnover
}

moves[++mvi] = mvUpDownScale(weight=1, lambda=0.1)
moves[mvi].addVariable(total_speciation, up=true)
moves[mvi].addVariable(turnover, up=true)

moves[++mvi] = mvUpDownScale(weight=1, lambda=0.1)
moves[mvi].addVariable(total_speciation, up=true)
moves[mvi].addVariable(delta_a, up=true)

frac <- 1.0
root_freq_abs <-  rep(1, k + 1)
root_freq_abs[1] <- 0
root_frequencies <- simplex(root_freq_abs)
# root_frequencies <- simplex(rep(1, 2 * k + 2))
condition        <- "time"
print("Marker 4… model components")

# the distribution
x ~ dnGLHBDSP(rootAge   = age,
              lambda    = lambda,
              mu        = mu,
              eta       = Q_combined,
              omega     = omega,
              pi        = root_frequencies,
              rho       = frac,
              condition = condition,
              taxa      = taxa,
              nStates   = k + 1,
              nProc     = 4,
		      zeroIndex = FALSE)
print("Marker 5… GLHBDSP")

x.clamp(tree)
print("Marker 6… tree clamp")

x.clampCharData(data)
print("Marker 7… character data clamp")

x.lnProbability()
print("Marker 8… lnProbability")

# model
my_model = model(x)
print("Marker 9… my_model")

# monitors
monitors[1] = mnScreen(printgen=1)
monitors[2] = mnModel(printgen=1, file=outfile, exclude = ["clado_probs", "lambda", "mu"])
# monitors[3] = mnStochasticCharacterMap(glhbdsp = x, printgen = 50, filename = "output/maps_chromosse_sim1.log", include_simmap = true)
# monitors[3] = mnJointConditionalAncestralState(filename="output/anc_states_chromosse_sim1.log", printgen=1, tree=tree, cdbdp=x, withStartStates=true, type="NaturalNumbers")
print("Marker 10… monitors")

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
print("Marker 11… my_mcmc")

# my_mcmc.initializeFromCheckpoint("output/chromosse_sim_1.state") # to restart from checkpoint
my_mcmc.burnin(1000, tuningInterval=50)
my_mcmc.run(generations=25000)

q()
