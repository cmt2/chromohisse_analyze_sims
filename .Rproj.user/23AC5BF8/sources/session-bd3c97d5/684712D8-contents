source("src/simulate.R", chdir = TRUE)

############
# settings #
############

# states 1:num_chromo are chromosome numbers in hidden state A
# states num_chromo + 1:num_chromo are chromosome numbers in hidden state B

time       <- 10
num_chromo <- 16
num_hidden <- 2
num_cats   <- num_hidden * num_chromo

######################
# specify parameters #
######################

# rounded median of empirical estimates
# gamma_a <- 14.6
# delta_a <- 14.2

# gamma_b <- 0.3
# delta_b <- 0.1

# adjusted values for simulations
gamma_a <- 4.6
delta_a <- 4.2

gamma_b <- 0.15
delta_b <- 0.12

q_ab <- 0.02
q_ba <- 0.02

clado_no_change_a <- 0.07
clado_fusion_a    <- 0.5
clado_fission_a   <- 0.3

clado_no_change_b <- 0.9
clado_fusion_b    <- 0.08
clado_fission_b   <- 0.07

clado_ab <- 0.1
clado_ba <- 0.1
mu <- 0.9

absolute_clado_rates  <- c(clado_no_change_a, clado_no_change_b, clado_fission_a, clado_fission_b, clado_fusion_a, clado_fusion_b, clado_ab)
total_speciation_rate <- sum(absolute_clado_rates)
relative_clado_rates  <- absolute_clado_rates / total_speciation_rate

###################################
# spontaneous state-change events #
###################################

# spontaneous state changes
H = matrix(0, num_cats, num_cats)

# hidden state A
for(i in 1:num_chromo) {
    
    # upward transition
    if (i < num_chromo) {
        H[i, i + 1] <- gamma_a
    }
    
    # downward transition
    if (i > 1) {
        H[i, i - 1] <- delta_a
    }
    
    # transition to state B
    H[i, num_chromo + i] <- q_ab
    
}

# hidden state B
for(i in 1:num_chromo) {
    
    # upward transition
    if (i < num_chromo) {
        H[num_chromo + i, num_chromo + i + 1] <- gamma_b
    }
    
    # downward transition
    if (i > 1) {
        H[num_chromo + i, num_chromo + i - 1] <- delta_b
    }
    
    # transition to state A
    H[num_chromo + i, i] <- q_ba
    
}

diag(H) = -rowSums(H)

##################################################
# diversification-associated state-change events #
##################################################

# empty speciation-rate functions
lambda <- numeric(num_cats)

# empty speciation-associated state-change array
Omega = array(0, dim = c(num_cats, num_cats, num_cats))

# populate functions and arrays

# state A
for(i in 1:num_chromo) {
    
    if (i == num_chromo) {
        
        # fissions impossible
        lambda[i] <- clado_no_change_a + clado_fusion_a + clado_ab
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_a / (clado_no_change_a + clado_fusion_a + clado_ab)
        Omega[i,i,i - 1]          <- 0.5 * clado_fusion_a    / (clado_no_change_a + clado_fusion_a + clado_ab)
        Omega[i,i - 1,i]          <- 0.5 * clado_fusion_a    / (clado_no_change_a + clado_fusion_a + clado_ab)
        Omega[i,i,i + num_chromo] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fusion_a + clado_ab)
        Omega[i,i + num_chromo,i] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fusion_a + clado_ab)
        
    } else if (i == 1) {
        
        # fusions impossible
        lambda[i] <- clado_no_change_a + clado_fission_a + clado_ab
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_a / (clado_no_change_a + clado_fission_a + clado_ab)
        Omega[i,i,i + 1]          <- 0.5 * clado_fission_a   / (clado_no_change_a + clado_fission_a + clado_ab)
        Omega[i,i + 1,i]          <- 0.5 * clado_fission_a   / (clado_no_change_a + clado_fission_a + clado_ab)
        Omega[i,i,i + num_chromo] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fission_a + clado_ab)
        Omega[i,i + num_chromo,i] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fission_a + clado_ab)
        
    } else {
        
        # fissions and fusions possible
        lambda[i] <- clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_a / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i,i + 1]          <- 0.5 * clado_fission_a   / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i + 1,i]          <- 0.5 * clado_fission_a   / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i,i - 1]          <- 0.5 * clado_fusion_a    / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i - 1,i]          <- 0.5 * clado_fusion_a    / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i,i + num_chromo] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        Omega[i,i + num_chromo,i] <- 0.5 * clado_ab          / (clado_no_change_a + clado_fusion_a + clado_fission_a + clado_ab)
        
    }
    
}

# state B
for(i in num_chromo + 1:num_chromo) {
    
    if (i - num_chromo == num_chromo) {
        
        # fissions impossible
        lambda[i] <- clado_no_change_b + clado_fusion_b + clado_ba
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_b / (clado_no_change_b + clado_fusion_b + clado_ba)
        Omega[i,i,i - 1]          <- 0.5 * clado_fusion_b    / (clado_no_change_b + clado_fusion_b + clado_ba)
        Omega[i,i - 1,i]          <- 0.5 * clado_fusion_b    / (clado_no_change_b + clado_fusion_b + clado_ba)
        Omega[i,i,i - num_chromo] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fusion_b + clado_ba)
        Omega[i,i - num_chromo,i] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fusion_b + clado_ba)
        
    } else if (i - num_chromo == 1) {
        
        # fusions impossible
        lambda[i] <- clado_no_change_b + clado_fission_b + clado_ba
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_b / (clado_no_change_b + clado_fission_b + clado_ba)
        Omega[i,i,i + 1]          <- 0.5 * clado_fission_b   / (clado_no_change_b + clado_fission_b + clado_ba)
        Omega[i,i + 1,i]          <- 0.5 * clado_fission_b   / (clado_no_change_b + clado_fission_b + clado_ba)
        Omega[i,i,i - num_chromo] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fission_b + clado_ba)
        Omega[i,i - num_chromo,i] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fission_b + clado_ba)
        
    } else {
        
        # fissions and fusions possible
        lambda[i] <- clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba
        
        Omega[i,i,i]              <- 1.0 * clado_no_change_b / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i,i + 1]          <- 0.5 * clado_fission_b   / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i + 1,i]          <- 0.5 * clado_fission_b   / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i,i - 1]          <- 0.5 * clado_fusion_b    / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i - 1,i]          <- 0.5 * clado_fusion_b    / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i,i - num_chromo] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        Omega[i,i - num_chromo,i] <- 0.5 * clado_ba          / (clado_no_change_b + clado_fusion_b + clado_fission_b + clado_ba)
        
    }
    
}

#############################################
# other asynchronous diversification events #
#############################################

extinction <- rep(mu, num_cats)

############
# sampling #
############

rho <- 1.0

############
# simulate #
############

for (j in 1:100) {
    
    time <- 25
    init <- num_chromo / 2
    
    min_percent <- 0.1 # fraction of samples in each hidden state
    target_min <- 450  # minimum number of tips
    target_max <- 550  # maximum number of tips
    
    sim <- simulateChromoHiSSEConditional(lambda, extinction, H, Omega, rho, time, init, 
                                          num_chromo, num_hidden, min_percent, 
                                          target_min, target_max, verbose = TRUE)
    
    #plot(sim)
    #sim$data
    
    
    ### write data to nexus 
    data <- data.frame(name = names(sim$dat), a = sim$data)
    data$a[data$a>num_chromo] <- data$a[data$a>num_chromo] - num_chromo
    data$b <- data$a + num_chromo + 1 # add one to leave room for a 0 state in the hidden
    data$new <- paste0("(", data$a, " ",data$b,")")
    data <- data[,c(1,4)]
    
    datfilename <- paste0("sims/sims_round_2/sim", j, ".tsv")
    write.table(data, 
                file=datfilename,
                quote = FALSE,
                row.names = FALSE,
                sep="\t",
                col.names = FALSE)
    ### write tree to file
    treefilename <- paste0("sims/sims_round_2/sim", j, ".tre")
    ape::write.tree(sim, 
                    file = treefilename)
}
